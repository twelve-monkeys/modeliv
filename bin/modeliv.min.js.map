{"version":3,"sources":["modeliv.entry.js","modeliv.entry.ts"],"names":["construct","constructor","args","concat","factoryFunction","bind","apply","state","name","console","log","_states","push","new_constructor","_i","arguments","length","instance","_instances","Proxy","get","target","l","filter","i","JSON","stringify","dispose","prototype","dispatch","tier","actionName","propogate","slice","queue","value","instances","_a","instance_info","dispatchTo","withoutTier","o","parse","from_tier","fn","old","version","store","messages","reason","message","messagesFor","sv","splice","_loop_1","v","_instances_1","getStoreVersions","map","ActionsAt","getMessagesToSend","result","m","gotMessages","messages_1","stores","key","hasOwnProperty","stores_1","exports","TieredState","this"],"mappings":"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","file":"modeliv.min.js","sourcesContent":["\"use strict\";\nvar _states = [];\n;\nvar _instances = [];\nvar messages = [];\nfunction construct(constructor, args) {\n    args = [null].concat(args);\n    var factoryFunction = constructor.bind.apply(constructor, args);\n    return new factoryFunction();\n}\nfunction state(constructor) {\n    var name = constructor.name;\n    console.log(\"state: \" + name);\n    _states.push(constructor);\n    var new_constructor = (function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i - 0] = arguments[_i];\n        }\n        var instance = construct(constructor, args);\n        console.log(\"instance: \" + instance.constructor.name);\n        _instances.push({ name: name, instance: instance });\n        return new Proxy({}, {\n            get: function (target, name) {\n                if (name === \"dispose\")\n                    return function () {\n                        console.log(\"dispose: \" + instance.constructor.name);\n                        var l = _instances.length;\n                        _instances = _instances.filter(function (i) { return i.instance !== instance; });\n                        if (_instances.length - l == 0)\n                            console.log(\"disposed 0 from \" + JSON.stringify(_instances));\n                        console.log(\"disposed \" + (l - _instances.length));\n                        if (instance.dispose)\n                            instance.dispose();\n                    };\n                console.log(\"getting \" + name + \" from \" + JSON.stringify(instance));\n                return instance[name];\n            }\n        });\n    });\n    new_constructor.prototype = constructor.prototype;\n    return new_constructor;\n}\nexports.state = state;\nfunction dispatch(tier, actionName, args, propogate) {\n    if (propogate === void 0) { propogate = true; }\n    console.log(\"dispatch: \" + actionName + \"(\" + JSON.stringify(args).slice(1, -1) + \")\");\n    if (propogate)\n        queue(\"action\", { tier: tier, name: actionName, value: args });\n    var instances = _instances.filter(function (i) { return i.instance.tier === tier; });\n    console.log(\"looking for instance of action. \" + instances.length + \" total instances of actions\");\n    for (var _i = 0, _a = instances.filter(function (i) { return typeof i.instance[actionName] === \"function\"; }); _i < _a.length; _i++) {\n        var instance_info = _a[_i];\n        var instance = instance_info.instance;\n        dispatchTo(instance, tier, instance_info.name, instance[actionName], args);\n    }\n}\nexports.dispatch = dispatch;\nfunction withoutTier(o) {\n    var value = JSON.parse(JSON.stringify(o));\n    delete value.tier;\n    return value;\n}\nfunction dispatchTo(instance, from_tier, name, fn, args) {\n    console.log(\"=> \" + name);\n    var old = JSON.stringify(withoutTier(instance));\n    fn.apply(instance, args);\n    var value = withoutTier(instance);\n    if (old !== JSON.stringify(value)) {\n        var version = instance.version;\n        console.log(\"new version from \" + version);\n        instance.version = (version || 0) + 1;\n        value.version = instance.version;\n        console.log(\"to \" + instance.version);\n        queue(\"change\", { tier: from_tier, store: name, name: \"setAll\", value: value });\n        console.log(\"message: \" + JSON.stringify(messages[messages.length - 1]));\n    }\n}\nfunction queue(reason, message) {\n    console.log(\"queueing message because \" + reason + \": \" + JSON.stringify(message));\n    messages.push(message);\n}\nfunction messagesFor(sv) {\n    messages.splice(0, messages.length);\n    var _loop_1 = function(instance_info) {\n        if (sv.filter(function (v) { return v[0] === instance_info.name && v[1] >= (instance_info.instance.version || 0); }).length)\n            queue(\"change (initial)\", { tier: instance_info.instance.tier, store: instance_info.name, name: \"setAll\", value: instance_info.instance });\n    };\n    for (var _i = 0, _instances_1 = _instances; _i < _instances_1.length; _i++) {\n        var instance_info = _instances_1[_i];\n        _loop_1(instance_info);\n    }\n}\nexports.messagesFor = messagesFor;\nfunction getStoreVersions() {\n    return _instances.map(function (instance) { return ({\n        name: instance.name,\n        version: instance.instance.version || 0\n    }); });\n}\nexports.getStoreVersions = getStoreVersions;\nfunction ActionsAt(tier) {\n    return new Proxy({}, {\n        get: function (target, name) {\n            if (name === \"toJSON\")\n                return function () {\n                    return \"[Proxy]\";\n                };\n            if (name === \"inspect\")\n                return function () {\n                    return \"[Proxyinspect]\";\n                };\n            return function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                return dispatch(tier, name, args);\n            };\n        }\n    });\n}\nexports.ActionsAt = ActionsAt;\nfunction getMessagesToSend(tier) {\n    if (tier === void 0) { tier = null; }\n    console.log(\"getMessagesFrom: \" + tier + \" have \" + messages.length + \" queued messages\");\n    var result = messages.filter(function (m) { return tier == null || m.tier === tier; });\n    messages = messages.filter(function (m) { return tier != null && m.tier !== tier; });\n    return result.length ? result : null;\n}\nexports.getMessagesToSend = getMessagesToSend;\nfunction gotMessages(tier, messages) {\n    console.log(\"gotMessages at tier \" + tier + \": \" + messages.length + \" messages\");\n    for (var _i = 0, messages_1 = messages; _i < messages_1.length; _i++) {\n        var m = messages_1[_i];\n        if (m.name === \"setAll\" && m.store) {\n            var stores = _instances.filter(function (i) { return i.name === m.store && i.instance.tier === tier; });\n            for (var key in m.value)\n                if (m.value.hasOwnProperty(key))\n                    for (var _a = 0, stores_1 = stores; _a < stores_1.length; _a++) {\n                        var store = stores_1[_a];\n                        store.instance[key] = m.value[key];\n                    }\n        }\n        else\n            dispatch(tier, m.name, m.value, false);\n    }\n}\nexports.gotMessages = gotMessages;\nvar TieredState = (function () {\n    function TieredState(tier) {\n        this.tier = tier;\n    }\n    return TieredState;\n}());\nexports.TieredState = TieredState;\n","declare class Proxy {\r\n    constructor(object: Object, handler: Object);\r\n}\r\n\r\nconst _states = [] as Function[];\r\ninterface IInstance {\r\n    tier: any;\r\n    version?: number;\r\n};\r\n\r\nlet _instances = [] as { name: string, instance: any }[];\r\n\r\nexport interface Message {\r\n    tier: any;\r\n    name: string;\r\n    value: any;\r\n    store?: any;\r\n}\r\n\r\nlet messages = [] as Message[];\r\n\r\nfunction construct(constructor: Function, args: any[]) {\r\n    args = [null].concat(args);\r\n    const factoryFunction = constructor.bind.apply(constructor, args);\r\n    return new factoryFunction();\r\n}\r\n\r\nexport function state(constructor: Function) {\r\n    const name = (constructor as any).name;\r\n    console.log(\"state: \" + name);\r\n    _states.push(constructor);\r\n\r\n    var new_constructor = ((...args: any[]) => {\r\n        const instance = construct(constructor, args);\r\n        console.log(\"instance: \" + instance.constructor.name);\r\n        _instances.push({ name, instance });\r\n\r\n        return new Proxy({}, {\r\n            get(target: Object, name: string) {\r\n                if (name === \"dispose\")\r\n                    return () => {\r\n                        console.log(\"dispose: \" + instance.constructor.name);\r\n                        var l = _instances.length;\r\n                        _instances = _instances.filter(i => i.instance !== instance);\r\n                        if (_instances.length - l == 0)\r\n                            console.log(\"disposed 0 from \" + JSON.stringify(_instances));\r\n\r\n                        console.log(\"disposed \" + (l - _instances.length));\r\n\r\n                        if (instance.dispose)\r\n                            instance.dispose();\r\n                    };\r\n                console.log(\"getting \" + name + \" from \" + JSON.stringify(instance));\r\n                return instance[name];\r\n            }\r\n        });\r\n    });\r\n    new_constructor.prototype = constructor.prototype;\r\n    return new_constructor as any as void;\r\n}\r\n\r\nexport function dispatch(tier: any, actionName: string, args: any[], propogate = true) {\r\n    console.log(\"dispatch: \" + actionName + \"(\" + JSON.stringify(args).slice(1, -1) + \")\");\r\n\r\n    if (propogate)\r\n        queue(\"action\", { tier, name: actionName, value: args });\r\n\r\n    const instances = _instances.filter(i => i.instance.tier === tier);\r\n    console.log(\"looking for instance of action. \" + instances.length + \" total instances of actions\");\r\n    for (const instance_info of instances.filter(i => typeof i.instance[actionName] === \"function\")) {\r\n        var instance = instance_info.instance;\r\n        dispatchTo(instance, tier, instance_info.name, instance[actionName] as Function, args);\r\n    }\r\n}\r\n\r\nfunction withoutTier(o: Object) {\r\n    const value = JSON.parse(JSON.stringify(o));\r\n    delete value.tier;\r\n    return value;\r\n}\r\n\r\nfunction dispatchTo(instance: IInstance, from_tier: any, name: string, fn: Function, args: any[]) {\r\n    console.log(\"=> \" + name);\r\n    const old = JSON.stringify(withoutTier(instance));\r\n\r\n    fn.apply(instance, args);\r\n\r\n    const value = withoutTier(instance);\r\n\r\n    if (old !== JSON.stringify(value)) {\r\n        let version = instance.version;\r\n        console.log(\"new version from \" + version);\r\n        instance.version = (version || 0) + 1;\r\n        value.version = instance.version;\r\n        console.log(\"to \" + instance.version);\r\n        queue(\"change\", { tier: from_tier, store: name, name: \"setAll\", value });\r\n\r\n        console.log(\"message: \" + JSON.stringify(messages[messages.length - 1]));\r\n    }\r\n}\r\n\r\nfunction queue(reason: string, message: any) {\r\n    console.log(\"queueing message because \" + reason + \": \" + JSON.stringify(message));\r\n    messages.push(message);\r\n}\r\n\r\nexport function messagesFor(sv: any[][]) {\r\n    messages.splice(0, messages.length);\r\n\r\n    for (const instance_info of _instances)\r\n        if (sv.filter(v => v[0] === instance_info.name && v[1] >= (instance_info.instance.version || 0)).length)\r\n            queue(\"change (initial)\", { tier: instance_info.instance.tier, store: instance_info.name, name: \"setAll\", value: instance_info.instance });\r\n}\r\n\r\nexport function getStoreVersions() {\r\n    return _instances.map(instance => ({\r\n        name: instance.name,\r\n        version: instance.instance.version || 0\r\n    }));\r\n}\r\n\r\nexport function ActionsAt(tier: any): any {\r\n    return new Proxy({}, {\r\n        get(target: Object, name: string) {\r\n            if (name === \"toJSON\")\r\n                return () =>\r\n                    \"[Proxy]\";\r\n            if (name === \"inspect\")\r\n                return () =>\r\n                    \"[Proxyinspect]\";\r\n\r\n            return (...args: any[]) =>\r\n                dispatch(tier, name, args);\r\n        }\r\n    });\r\n}\r\n\r\nexport function getMessagesToSend(tier: any = null) {\r\n    console.log(\"getMessagesFrom: \" + tier + \" have \" + messages.length + \" queued messages\");\r\n    const result = messages.filter(m => tier == null || m.tier === tier);\r\n    messages = messages.filter(m => tier != null && m.tier !== tier);\r\n    return result.length ? result : null;\r\n}\r\n\r\nexport function gotMessages(tier: any, messages: Message[]) {\r\n    console.log(\"gotMessages at tier \" + tier + \": \" + messages.length + \" messages\");\r\n    for (var m of messages)\r\n        if (m.name === \"setAll\" && m.store) {\r\n            const stores = _instances.filter(i => i.name === m.store && i.instance.tier === tier);\r\n            for (var key in m.value)\r\n                if (m.value.hasOwnProperty(key))\r\n                    for (const store of stores)\r\n                        store.instance[key] = m.value[key];\r\n\r\n        } else\r\n            dispatch(tier, m.name, m.value, false);\r\n}\r\n\r\nexport class TieredState<T> {\r\n    constructor(public tier: T) { }\r\n}"],"sourceRoot":"."}